Udemy Nextjs Course Property Pulse Traversymedia


Section 01: Introduction

01. Welcome To The Course

02. PropertyPulse Project Demo

03. What is Next.js ?

04. Next.js Features

05. Environment Setup
-otvorimo web stranicu: https://code.visualstudio.com
-otvorimo web stranicu: https://git-scm.com/
-Google Chrome extension React Developer Tools
-otvorimo web stranicu: https://www.mongodb.com/
-VS Code Code extension Spell Checker
-VS Code Code extension Simple React Snippets
-VS Code Code extension Prettier - Code formatter

06. Project Theme Files


Section 02: Next.js Fundamentals & Project Start

07. New Project & Folder Structure
-dodajemo folder _theme_files
-otvorimo web stranicu: https://nextjs.org/
-u terminalu instaliramo Next.js aplikaciju sa komandom npx create-next-app@14.1.0
-u tailwind.config.js fajl u konfiguracioni objekt extend dodajemo objekte fontFamily i gridTemplateCulumns

08. Layout & Homepage 
-u folderu app kreiramo komponentu layout.jsx
-u komponenti layout.jsx kreiramo funkciju MainLayout()
-funkciji MainLayout() dodajemo parametar destruktuirani prop children
-kreiramo komponentu page.jsx
-u komponenti page.jsx kreiramo funkciju HomePage()
-kreiramo folder assets
-u folderu assets kreiramo folder styles i globals.css fajl
-u globals.css fajl dodajemo tri Tailwind CSS direktive
-u komponentu layout.jsx importujemo globals.css fajl
-u folder app dodajemo sliku favicon.ico

09. Metadata & Assets
-za osvjezenje stranice ukucamo na tastaturi -ctrl + shift + R
-u komponenti layout.jsx kreiramo i eksportujemo varijablu objekt const metadata
-u objekt metadata dodajemo opcije title, keywords i description
-u folderu assets kreiramo folder images
-u folder images dodajemo cetiri slike
-u folderu public kreiramo folder images i properties
-u folder properties dodajemo slike nekretnina

10. File-Based Routing
-u folderu app kreiramo folder properties i komponentu page.jsx 
-u komponenti/page.jsx kreiramo funkciju PropertiesPage()
-u folderu properties kreiramo folder add i komponentu page.jsx
-u komponenti properties/add/page.jsx kreiramo funkciju AddPropertyPage() 
-u folderu properties kreiramo folder [id] i komponentu page.jsx
-u komponenti properties/[id]/page.jsx kreiramo funkciju PropertyPage()
-u komponentu app/page.jsx importujemo komponentu Link iz paketa Next Link
-komponenti Link dodajemo prop href

11. Server vs Client Components

12. Client Components & Navigation Hooks
-u komponentu [id]/page.jsx dodajemo direktivu 'use client'
-importujemo i kreiramo funkciju useRouter iz paketa Next Navigation
-vrijednost funkcije useRouter() pohranjujemo u varijablu const router
-importujemo i kreiramo funkciju useParams()
-vrijednost funkcije useParams() pohranjujemo u destruktuiranu varijablu const { id }
-importujemo i kreiramo funkciju useSearchParams()
-vrijednost funkcije useSearchParams() pohranjujemo u varijablu const searchParams
-importujemo i kreiramo funkciju usePathname()
-vrijednost funkcije usePathname() pohranjujemo u varijablu const pathname
-u komponenti properties/[id]/page.jsx, funkciji PropertyPage() dodajemo parametar destruktuirani prop params

13. Navbar Component Start
-kreiramo folder components i komponentu Navbar.jsx
-u komponentu layout.jsx importujemo komponentu Navbar.jsx
-u komponenti Navbar.jsx, u jsx-u kreiramo HTML elemente sa Tailwind CSS klasama
-u komponentu Navbar.jsx importujemo komponentu Images iz paketa Next Image
-importujemo slike logo i profileDefault

14. Navbar Links, Dropdown State & React Icons
-u komponentu Navbar.jsx importujemo komponentu Link
-u jsx-u, preimenujemo HTML elemente <a> sa komponentom Link
-u terminalu instaliramo paket React Icons
-dodajemo direktivu 'use client'
-importujemo funkciju useState()
-kreiramo state varijablu isMobileMenuOpen i set funkciju setIsMobileMenuOpen
-u div elementu za Mobile menu button, button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju setIsMobileMenuOpen
-u jsx dodajemo uslov {isMobileMenuOpen && (...)} i div element za Mobile menu
-kreiramo state varijablu isProfileMenuOpen i set funkciju setIsProfileMenuOpen
-u div elementu za Profile dropdown button, button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju setIsProfileMenuOpen
-dodajemo uslov {isProfileMenuOpen && (...)}

15. Active Links & Conditional Rendering
-u komponentu Navbar.jsx importujemo i kreiramo funkciju usePathname
-vrijednost funkcije usePathname() pohranjujemo u varijablu const pathname
-u div elementu za Desktop Menu Hidden below md screens, komponenti Link dodajemo dinamicku klasu
-u dinamicku klasu dodajemo uslov ternarni operator pathname === '/'
-kreiramo state varijablu isLoggedIn i set funkciju setLoggedIn
-dodajemo nekoliko uslova {isLoggedIn && (...)}
-u div elementu za Right Side Menu dodajemo uslov {!isLoggedIn && (...)}

16. Homepage Components & Footer
-u folderu components kreiramo komponentu Hero.jsx
-kreiramo komponentu InfoBoxes.jsx
-u komponentu app/page.jsx importujemo komponente Hero.jsx i InfoBoxes.jsx
-kreiramo komponentu InfoBox.jsx
-u komponenti InfoBox.jsx funkciji InfoBox() dodajemo parametre destruktuirane props
-u komponentu InfoBoxes.jsx importujemo komponentu InfoBox
-kreiramo komponentu Footer.jsx
-u komponentu layout.jsx importujemo komponentu Footer.jsx

17. Properties Page & PropertyCard Component
-kreiramo properties.json fajl
-u komponentu properties/page.jsx importujemo niz properties
-kreiramo roditelj section element sa Tailwind CSS klasama
-u section elementu kreiramo div element sa Tailwind CSS klasama
-u div element dodajemo uslov ternani operator properties.length === 0
-u prvi uslov dodajemo p element da nema nekretnina
-u drugi uslov dodajemo metodu properties.map()
-u folderu components kreiramo komponentu PropertyCard.jsx
-u komponenti PropertyCard.jsx, funkciji PropertyCard() dodajemo parametar destruktuirani prop property
-importujemo komponente Image i Link
-importujemo React ikonice
-u jsx-u kreiramo HTML elemente sa Tailwind CSS klasama i dinamicki prikazujemo podatke
-u komponentu properties/page.jsx importujemo komponentu PropertyCard.jsx
-u metodu properties.map() dodajemo komponentu PropertyCard sa prop key i property
-u komponenti PropertyCard.jsx kreiramo funkciju getRateDisplay()

18. Home Property Listings
-u folderu components kreiramo komponentu HomeProperties.jsx
-u komponentu HomeProperties.jsx importujemo json fajl properties
-importujemo komponente Link i PropertyCard.jsx
-u komponentu app/page.jsx importujemo komponentu HomeProperties.jsx
-u komponenti HomeProperties.jsx kreiramo varijablu const recentProperties
-u komponenti HomeProperties.jsx, u jsx-u dodajemo ternarni uslov recentProperties === 0 
-prvi uslov u ternarnom operatoru je p element ukoliko nema nekretnina
-drugi uslov u ternarnom operatoru je metoda recentProperties?.map()
-u funkciju map() dodajemo komponentu PropertyCard sa prop key i property

19. Custom Not Found & Loading Pages
-u folderu app kreiramo komponentu not-found.jsx
-u komponenti not-found.jsx kreiramo funkciju NotFoundPage()
-u komponentu NotFoundPage() importujemo React ikonicu FaExclamationTriangle i komponentu Link
-u folderu app kreiramo komponentu loading.jsx
-otvorimo link: https://www.npmjs.com/package/react-spinners
-u terminalu instaliramo paket React Spinners sa komandom npm i react-spinners
-u komponentu loading.jsx importujemo komponentu ClipLoader iz paketa React Spinners
-kreiramo varijablu objekt const override
-u jsx-u dodajemo komponentu ClipLoader sa prop color, loading, cssOverride, size, aria-label i data-testid
-u prop cssOverride proslijedujemo vrijednost varijable override


Section 03: MongoDB Database, Server Components & Fetching Properties

20. Create MongoDB Database
-otvorimo web stranicu Mongo Atlas: https:/www.mongodb.com
-na web stranici Mongo Atlas kreiramo projekt
-kreiramo bazu podataka propertypulse i kolekciju
-kreiramo fajlove .env.local i example.env
-u env.local fajlu kreiramo varijable NEXT_PUBLIC_DOMAIN, NEXT_PUBLIC_API_DOMAIN i MONGODB_URI
-u example.env fajl dodajemo primjer varijabli koje je potrebno kreirati

21. MongoDB Compass & Importing Data
-u MongoDB Compass bazi podataka kreiramo bazu sa imenom propertypulse
-u bazi propertypulse kreiramo kolekciju properties
-kreiramo properties-mongo.json fajl
-properties-mongo.json fajl importujemo u kolekciju properties

22. Database Connection & Mongoose
-u terminalu instaliramo pakete MongoDB i Mongoose
-u terminalu ukucamo komandu npm i mongodb mongoose
-kreiramo folder config
-u folderu config kreiramo database.js fajl
-u database.js fajl importujemo instancu mongoose iz paketa Mongoose 
-kreiramo varijablu let connected
-kreiramo asinhronu funkciju connectDB()
-u funkciju connectDB() dodajemo metodu mongoose.set()
-funkciji set() dodajemo dva argumenta: 'strictQuery' i true
-dodajemo uslov if (connected)
-dodajemo blokove koda try - catch
-u bloku koda try dodajemo metodu await mongoose.connect()
-redeklarisemo varijablu connected = true
-u bloku koda catch ispisujemo eventualnu error poruku
-u terminalu instaliramo paket Colors sa komandom npm i colors
-u komponentu app/page.jsx importujemo funkciju connectDB iz foldera config

23. Property & User Models
-kreiramo folder models
-u folderu models kreiramo User.js fajl
-u User.js fajl importujemo funkcije Schema, model i models iz paketa Mongoose
-kreiramo funkciju new Schema({ ... })
-vrijednost funkcije new Schema() pohranjujemo u varijablu const UserSchema
-u funkciju Schema() dodajemo objekte: email, username, image i niz bookmarks
-dodajemo objekt timestamp
-kreiramo varijablu const User
-varijablu User eksportujemo kao default
-u folderu models kreiramo Property.js fajl
-u Property.js fajl importujemo funkcije Schema, model i models iz paketa Mongoose
-kreiramo funkciju new Schema({ ... })
-vrijednost funkcije new Schema() pohranjujemo u varijablu const PropertySchema
-u funkciji Schema() kreiramo objekte: owner, name, type, description, location, beds, baths, square_feet, niz amenities, rates, seller_info, niz images i is_Featured
-u objektu location kreiramo objekte: street, city, state i zipcode
-u objektu rates kreiramo objekte: nightly, weekly i monthly
-u objektu seller_info kreiramo objekte: name, email i phone
-dodajemo objekt timestamp 
-kreiramo varijablu const Property
-varijablu const Property eksportujemo kao default

24. Fetch Data Using Server Component
-u komponentu properties/page.jsx importujemo model Property
-importujemo funkciju connectDB iz foldera config
-funkciji PropertiesPage dodajemo asinhronost
-dodajemo metodu await Property.find({ }).lean();
-vrijednost metode Property.find() pohranjujemo u varijablu const properties
-u komponentu HomeProperties.jsx importujemo funkciju connectDB i model Property
-funkciji HomeProperties.jsx dodajemo asinhronost
-u funkciju HomeProperties() dodajemo metodu await connectDB()
-dodajemo metodu await Property.find()
-vrijednost metode await Property.find() pohranjujemo u varijablu const recentProperties

25. Single Property & Header Image
-u komponentu [id]/page.jsx importujemo funkciju connectDB i model Property
-funkciji PropertyPage() dodajemo asinhronost
-u funkciju PropertyPage() dodajemo metodu await connectDB()
-dodajemo metodu await Property.findById()
-vrijednost metode await Property.findById() pohranjujemo u varijablu const property
-u jsx-u kreiramo section roditelj element
-u folderu components kreiramo komponentu PropertyHeaderImage.jsx
-u komponentu properties/page.jsx importujemo komponentu PropertyHeaderImage.jsx
-u jsx-u dodajemo komponentu PropertyHeaderImage sa prop image
-u komponenti PropertyHeaderImage.jsx kreiramo roditelj section element 
-u section elementu kreiramo HTML elemente sa Tailwind klasama
-importujemo komponentu Image
-funkciji PropertyHeaderImage() dodajemo parametar destruktuirani prop image
-u jsx-u komponenti Image dodajemo prop src, alt, className, width, height i sizes
-u komponenti properties/[id]/page.jsx, ispod komponente PropertyHeaderImage kreiramo section element
-u section elementu kreiramo div element sa Tailwind CSS klasama
-importujemo komponentu Link 
-u div element dodajemo komponentu Link sa prop href i className
-importujemo React ikonicu FaArrowLeft
-u komponentu Link dodajemo komponentu FaArrowLeft
-komponenti FaArrowLeft dodajemo prop className
-u drugom section elementu kreiramo dva div elementa sa Tailwind CSS klasama

26. Property Details Component
-u folderu components kreiramo komponentu PropertyDetails.jsx
-importujemo sest React ikonice
-umjesto i elemenata dodajemo React ikonice
-funkciji PropertyDetails.jsx dodajemo parametar destruktuirani prop property
-u jsx-u kreiramo main elemente kao roditelj element
-u main elementu kreiramo HTML elementee sa Tailwind CSS klasama
-u komponentu properties/[id]/page.jsx importujemo komponentu PropertyDetails.jsx
-u jsx-u komponenti PropertyDetails dodajemo prop property
-u jsx-u dinamicki prikazujemo podatke iz prop property
-u jsx-u dodajemo tri ternarna uslova property?.rates ? (...) : (...)
-u ul element dodajemo metodu property?.amenities?.map()
-u funkciji map() kreiramo li element sa prop key
-u li element kreiramo dva span element 
-u prvi span element dodajemo komponentu FaCheck sa Tailwind CSS klasama
-u drugi span element dinamicki prikazujemo varijablu amenity
-kreiramo div element sa id-em map

27. Intro to API Routes
-u folderu api kreiramo folder properties i route.ts fajl
-u route.ts fajlu kreiramo i eksportujemo asinhronu funkciju GET()
-u funkciju GET(), dodajemo u izjavu return new Response()
-importujemo funkciju connectDB i model Property
-u funkciju GET() dodajemo blokove koda try i catch
-u blok koda try dodajemo metodu await connectDB()
-dodajemo metodu await Property.find() 
-dodajemo izjavu return new Response()
-vrijednost metode await Property.find() pohranjujemo u varijablu const properties
-u blok koda catch dodajemo izjavu return new Response()
-u pretrazivacu otvorimo link: http://localhost:3000/api/properties
-u folderu properties kreiramo folder [id]
-u folderu properties/[id] kreiramo route.ts fajl
-u [id]/route.ts fajlu kreiramo i eksportujemo asinhronu funkciju GET()
-funkciju GET dodajemo parametre request i params
-u funkciju GET dodajemo blokove koda try - catch
-u blok koda try dodajemo metodu await Property.findById()
-vrijednost metode await Property.findById() pohranjujemo u varijablu const property
-dodajemo uslov if (!property)
-dodajemo izjavu return new Response()
-u blok koda catch dodajemo izjavu return new Response()
-u pretrazivacu otvorimo link: http://localhost:3000/api/properties/673dfdbc4d14677f2db0c3ca


Section 04: Next Auth, Sessions & Google Providers

28. What Is Next Auth ?

29. Google OAuth Setup
-otvorimo link https://console.cloud.google.com/
-kreiramo novi projekt 
-u .env.local fajlu kreiramo varijable GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, NEXTAUTH_URL, NEXTAUTH_URL_INTERNAL i NEXTAUTH_SECRET
-u terminalu ukucamo komandu openssl rand -base64 32 da generisemo vrijednost za varijablu NEXTAUTH_SECRET
-u example.env dodajemo primjer varijabli koje je potrebno kreirati