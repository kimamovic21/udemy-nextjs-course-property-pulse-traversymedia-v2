Udemy Nextjs Course Property Pulse Traversymedia


Section 01: Introduction

01. Welcome To The Course

02. PropertyPulse Project Demo

03. What is Next.js ?

04. Next.js Features

05. Environment Setup
-otvorimo web stranicu: https://code.visualstudio.com
-otvorimo web stranicu: https://git-scm.com/
-Google Chrome extension React Developer Tools
-otvorimo web stranicu: https://www.mongodb.com/
-VS Code Code extension Spell Checker
-VS Code Code extension Simple React Snippets
-VS Code Code extension Prettier - Code formatter

06. Project Theme Files


Section 02: Next.js Fundamentals & Project Start

07. New Project & Folder Structure
-dodajemo folder _theme_files
-otvorimo web stranicu: https://nextjs.org/
-u terminalu instaliramo Next.js aplikaciju sa komandom npx create-next-app@14.1.0
-u tailwind.config.js fajl u konfiguracioni objekt extend dodajemo objekte fontFamily i gridTemplateCulumns

08. Layout & Homepage 
-u folderu app kreiramo komponentu layout.jsx
-u komponenti layout.jsx kreiramo funkciju MainLayout()
-funkciji MainLayout() dodajemo parametar destruktuirani prop children
-kreiramo komponentu page.jsx
-u komponenti page.jsx kreiramo funkciju HomePage()
-kreiramo folder assets
-u folderu assets kreiramo folder styles i globals.css fajl
-u globals.css fajl dodajemo tri Tailwind CSS direktive
-u komponentu layout.jsx importujemo globals.css fajl
-u folder app dodajemo sliku favicon.ico

09. Metadata & Assets
-za osvjezenje stranice ukucamo na tastaturi -ctrl + shift + R
-u komponenti layout.jsx kreiramo i eksportujemo varijablu objekt const metadata
-u objekt metadata dodajemo opcije title, keywords i description
-u folderu assets kreiramo folder images
-u folder images dodajemo cetiri slike
-u folderu public kreiramo folder images i properties
-u folder properties dodajemo slike nekretnina

10. File-Based Routing
-u folderu app kreiramo folder properties i komponentu page.jsx 
-u komponenti/page.jsx kreiramo funkciju PropertiesPage()
-u folderu properties kreiramo folder add i komponentu page.jsx
-u komponenti properties/add/page.jsx kreiramo funkciju AddPropertyPage() 
-u folderu properties kreiramo folder [id] i komponentu page.jsx
-u komponenti properties/[id]/page.jsx kreiramo funkciju PropertyPage()
-u komponentu app/page.jsx importujemo komponentu Link iz paketa Next Link
-komponenti Link dodajemo prop href

11. Server vs Client Components

12. Client Components & Navigation Hooks
-u komponentu [id]/page.jsx dodajemo direktivu 'use client'
-importujemo i kreiramo funkciju useRouter iz paketa Next Navigation
-vrijednost funkcije useRouter() pohranjujemo u varijablu const router
-importujemo i kreiramo funkciju useParams()
-vrijednost funkcije useParams() pohranjujemo u destruktuiranu varijablu const { id }
-importujemo i kreiramo funkciju useSearchParams()
-vrijednost funkcije useSearchParams() pohranjujemo u varijablu const searchParams
-importujemo i kreiramo funkciju usePathname()
-vrijednost funkcije usePathname() pohranjujemo u varijablu const pathname
-u komponenti properties/[id]/page.jsx, funkciji PropertyPage() dodajemo parametar destruktuirani prop params

13. Navbar Component Start
-kreiramo folder components i komponentu Navbar.jsx
-u komponentu layout.jsx importujemo komponentu Navbar.jsx
-u komponenti Navbar.jsx, u jsx-u kreiramo HTML elemente sa Tailwind CSS klasama
-u komponentu Navbar.jsx importujemo komponentu Images iz paketa Next Image
-importujemo slike logo i profileDefault

14. Navbar Links, Dropdown State & React Icons
-u komponentu Navbar.jsx importujemo komponentu Link
-u jsx-u, preimenujemo HTML elemente <a> sa komponentom Link
-u terminalu instaliramo paket React Icons
-dodajemo direktivu 'use client'
-importujemo funkciju useState()
-kreiramo state varijablu isMobileMenuOpen i set funkciju setIsMobileMenuOpen
-u div elementu za Mobile menu button, button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju setIsMobileMenuOpen
-u jsx dodajemo uslov {isMobileMenuOpen && (...)} i div element za Mobile menu
-kreiramo state varijablu isProfileMenuOpen i set funkciju setIsProfileMenuOpen
-u div elementu za Profile dropdown button, button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju setIsProfileMenuOpen
-dodajemo uslov {isProfileMenuOpen && (...)}

15. Active Links & Conditional Rendering
-u komponentu Navbar.jsx importujemo i kreiramo funkciju usePathname
-vrijednost funkcije usePathname() pohranjujemo u varijablu const pathname
-u div elementu za Desktop Menu Hidden below md screens, komponenti Link dodajemo dinamicku klasu
-u dinamicku klasu dodajemo uslov ternarni operator pathname === '/'
-kreiramo state varijablu isLoggedIn i set funkciju setLoggedIn
-dodajemo nekoliko uslova {isLoggedIn && (...)}
-u div elementu za Right Side Menu dodajemo uslov {!isLoggedIn && (...)}

16. Homepage Components & Footer
-u folderu components kreiramo komponentu Hero.jsx
-kreiramo komponentu InfoBoxes.jsx
-u komponentu app/page.jsx importujemo komponente Hero.jsx i InfoBoxes.jsx
-kreiramo komponentu InfoBox.jsx
-u komponenti InfoBox.jsx funkciji InfoBox() dodajemo parametre destruktuirane props
-u komponentu InfoBoxes.jsx importujemo komponentu InfoBox
-kreiramo komponentu Footer.jsx
-u komponentu layout.jsx importujemo komponentu Footer.jsx

17. Properties Page & PropertyCard Component
-kreiramo properties.json fajl
-u komponentu properties/page.jsx importujemo niz properties
-kreiramo roditelj section element sa Tailwind CSS klasama
-u section elementu kreiramo div element sa Tailwind CSS klasama
-u div element dodajemo uslov ternarni operator properties.length === 0
-u prvi uslov dodajemo p element da nema nekretnina
-u drugi uslov dodajemo metodu properties.map()
-u folderu components kreiramo komponentu PropertyCard.jsx
-u komponenti PropertyCard.jsx, funkciji PropertyCard() dodajemo parametar destruktuirani prop property
-importujemo komponente Image i Link
-importujemo React ikonice
-u jsx-u kreiramo HTML elemente sa Tailwind CSS klasama i dinamicki prikazujemo podatke
-u komponentu properties/page.jsx importujemo komponentu PropertyCard.jsx
-u metodu properties.map() dodajemo komponentu PropertyCard sa prop key i property
-u komponenti PropertyCard.jsx kreiramo funkciju getRateDisplay()

18. Home Property Listings
-u folderu components kreiramo komponentu HomeProperties.jsx
-u komponentu HomeProperties.jsx importujemo json fajl properties
-importujemo komponente Link i PropertyCard.jsx
-u komponentu app/page.jsx importujemo komponentu HomeProperties.jsx
-u komponenti HomeProperties.jsx kreiramo varijablu const recentProperties
-u komponenti HomeProperties.jsx, u jsx-u dodajemo ternarni uslov recentProperties === 0 
-prvi uslov u ternarnom operatoru je p element ukoliko nema nekretnina
-drugi uslov u ternarnom operatoru je metoda recentProperties?.map()
-u funkciju map() dodajemo komponentu PropertyCard sa prop key i property

19. Custom Not Found & Loading Pages
-u folderu app kreiramo komponentu not-found.jsx
-u komponenti not-found.jsx kreiramo funkciju NotFoundPage()
-u komponentu NotFoundPage() importujemo React ikonicu FaExclamationTriangle i komponentu Link
-u folderu app kreiramo komponentu loading.jsx
-otvorimo link: https://www.npmjs.com/package/react-spinners
-u terminalu instaliramo paket React Spinners sa komandom npm i react-spinners
-u komponentu loading.jsx importujemo komponentu ClipLoader iz paketa React Spinners
-kreiramo varijablu objekt const override
-u jsx-u dodajemo komponentu ClipLoader sa prop color, loading, cssOverride, size, aria-label i data-testid
-u prop cssOverride proslijedujemo vrijednost varijable override


Section 03: MongoDB Database, Server Components & Fetching Properties

20. Create MongoDB Database
-otvorimo web stranicu Mongo Atlas: https:/www.mongodb.com
-na web stranici Mongo Atlas kreiramo projekt
-kreiramo bazu podataka propertypulse i kolekciju
-kreiramo fajlove .env.local i example.env
-u env.local fajlu kreiramo varijable NEXT_PUBLIC_DOMAIN, NEXT_PUBLIC_API_DOMAIN i MONGODB_URI
-u example.env fajl dodajemo primjer varijabli koje je potrebno kreirati

21. MongoDB Compass & Importing Data
-u MongoDB Compass bazi podataka kreiramo bazu sa imenom propertypulse
-u bazi propertypulse kreiramo kolekciju properties
-kreiramo properties-mongo.json fajl
-properties-mongo.json fajl importujemo u kolekciju properties

22. Database Connection & Mongoose
-u terminalu instaliramo pakete MongoDB i Mongoose
-u terminalu ukucamo komandu npm i mongodb mongoose
-kreiramo folder config
-u folderu config kreiramo database.js fajl
-u database.js fajl importujemo instancu mongoose iz paketa Mongoose 
-kreiramo varijablu let connected
-kreiramo asinhronu funkciju connectDB()
-u funkciju connectDB() dodajemo metodu mongoose.set()
-funkciji set() dodajemo dva argumenta: 'strictQuery' i true
-dodajemo uslov if (connected)
-dodajemo blokove koda try - catch
-u bloku koda try dodajemo metodu await mongoose.connect()
-redeklarisemo varijablu connected = true
-u bloku koda catch ispisujemo eventualnu error poruku
-u terminalu instaliramo paket Colors sa komandom npm i colors
-u komponentu app/page.jsx importujemo funkciju connectDB iz foldera config

23. Property & User Models
-kreiramo folder models
-u folderu models kreiramo User.js fajl
-u User.js fajl importujemo funkcije Schema, model i models iz paketa Mongoose
-kreiramo funkciju new Schema({ ... })
-vrijednost funkcije new Schema() pohranjujemo u varijablu const UserSchema
-u funkciju Schema() dodajemo objekte: email, username, image i niz bookmarks
-dodajemo objekt timestamp
-kreiramo varijablu const User
-varijablu User eksportujemo kao default
-u folderu models kreiramo Property.js fajl
-u Property.js fajl importujemo funkcije Schema, model i models iz paketa Mongoose
-kreiramo funkciju new Schema({ ... })
-vrijednost funkcije new Schema() pohranjujemo u varijablu const PropertySchema
-u funkciji Schema() kreiramo objekte: owner, name, type, description, location, beds, baths, square_feet, niz amenities, rates, seller_info, niz images i is_Featured
-u objektu location kreiramo objekte: street, city, state i zipcode
-u objektu rates kreiramo objekte: nightly, weekly i monthly
-u objektu seller_info kreiramo objekte: name, email i phone
-dodajemo objekt timestamp 
-kreiramo varijablu const Property
-varijablu const Property eksportujemo kao default

24. Fetch Data Using Server Component
-u komponentu properties/page.jsx importujemo model Property
-importujemo funkciju connectDB iz foldera config
-funkciji PropertiesPage dodajemo asinhronost
-dodajemo metodu await Property.find({ }).lean()
-vrijednost metode Property.find() pohranjujemo u varijablu const properties
-u komponentu HomeProperties.jsx importujemo funkciju connectDB i model Property
-funkciji HomeProperties.jsx dodajemo asinhronost
-u funkciju HomeProperties() dodajemo metodu await connectDB()
-dodajemo metodu await Property.find()
-vrijednost metode await Property.find() pohranjujemo u varijablu const recentProperties

25. Single Property & Header Image
-u komponentu [id]/page.jsx importujemo funkciju connectDB i model Property
-funkciji PropertyPage() dodajemo asinhronost
-u funkciju PropertyPage() dodajemo metodu await connectDB()
-dodajemo metodu await Property.findById()
-vrijednost metode await Property.findById() pohranjujemo u varijablu const property
-u jsx-u kreiramo section roditelj element
-u folderu components kreiramo komponentu PropertyHeaderImage.jsx
-u komponentu properties/page.jsx importujemo komponentu PropertyHeaderImage.jsx
-u jsx-u dodajemo komponentu PropertyHeaderImage sa prop image
-u komponenti PropertyHeaderImage.jsx kreiramo roditelj section element 
-u section elementu kreiramo HTML elemente sa Tailwind klasama
-importujemo komponentu Image
-funkciji PropertyHeaderImage() dodajemo parametar destruktuirani prop image
-u jsx-u komponenti Image dodajemo prop src, alt, className, width, height i sizes
-u komponenti properties/[id]/page.jsx, ispod komponente PropertyHeaderImage kreiramo section element
-u section elementu kreiramo div element sa Tailwind CSS klasama
-importujemo komponentu Link 
-u div element dodajemo komponentu Link sa prop href i className
-importujemo React ikonicu FaArrowLeft
-u komponentu Link dodajemo komponentu FaArrowLeft
-komponenti FaArrowLeft dodajemo prop className
-u drugom section elementu kreiramo dva div elementa sa Tailwind CSS klasama

26. Property Details Component
-u folderu components kreiramo komponentu PropertyDetails.jsx
-importujemo sest React ikonice
-umjesto i elemenata dodajemo React ikonice
-funkciji PropertyDetails.jsx dodajemo parametar destruktuirani prop property
-u jsx-u kreiramo main elemente kao roditelj element
-u main elementu kreiramo HTML elemente sa Tailwind CSS klasama
-u komponentu properties/[id]/page.jsx importujemo komponentu PropertyDetails.jsx
-u jsx-u komponenti PropertyDetails dodajemo prop property
-u jsx-u dinamicki prikazujemo podatke iz prop property
-u jsx-u dodajemo tri ternarna uslova property?.rates ? (...) : (...)
-u ul element dodajemo metodu property?.amenities?.map()
-u funkciji map() kreiramo li element sa prop key
-u li element kreiramo dva span element 
-u prvi span element dodajemo komponentu FaCheck sa Tailwind CSS klasama
-u drugi span element dinamicki prikazujemo varijablu amenity
-kreiramo div element sa id-em map

27. Intro to API Routes
-u folderu api kreiramo folder properties i route.ts fajl
-u route.ts fajlu kreiramo i eksportujemo asinhronu funkciju GET()
-u funkciju GET(), dodajemo u izjavu return new Response()
-importujemo funkciju connectDB i model Property
-u funkciju GET() dodajemo blokove koda try i catch
-u blok koda try dodajemo metodu await connectDB()
-dodajemo metodu await Property.find() 
-dodajemo izjavu return new Response()
-vrijednost metode await Property.find() pohranjujemo u varijablu const properties
-u blok koda catch dodajemo izjavu return new Response()
-u pretrazivacu otvorimo link: http://localhost:3000/api/properties
-u folderu properties kreiramo folder [id]
-u folderu properties/[id] kreiramo route.ts fajl
-u [id]/route.ts fajlu kreiramo i eksportujemo asinhronu funkciju GET()
-funkciju GET dodajemo parametre request i params
-u funkciju GET dodajemo blokove koda try - catch
-u blok koda try dodajemo metodu await Property.findById()
-vrijednost metode await Property.findById() pohranjujemo u varijablu const property
-dodajemo uslov if (!property)
-dodajemo izjavu return new Response()
-u blok koda catch dodajemo izjavu return new Response()
-u pretrazivacu otvorimo link: http://localhost:3000/api/properties/673dfdbc4d14677f2db0c3ca


Section 04: Next Auth, Sessions & Google Providers

28. What Is Next Auth ?

29. Google OAuth Setup
-otvorimo link https://console.cloud.google.com/
-kreiramo novi projekt 
-u .env.local fajlu kreiramo varijable GOOGLE_CLIENT_ID, GOOGLE_CLIENT_SECRET, NEXTAUTH_URL, NEXTAUTH_URL_INTERNAL i NEXTAUTH_SECRET
-u terminalu ukucamo komandu openssl rand -base64 32 da generisemo vrijednost za varijablu NEXTAUTH_SECRET
-u example.env dodajemo primjer varijabli koje je potrebno kreirati

30. Next Auth & Provider Setup
-otvorimo link https://next-auth.js.org/
-u terminalu instaliramo paket Next Auth sa komandom npm i next-auth@4
-u folderu app/api kreiramo folder auth
-u folderu auth kreiramo folder [...nextauth]
-u folderu [...nextauth] kreiramo route.js fajl
-kreiramo folder utils
-u folderu utils kreiramo authOptions.js fajl
-u authOptions.js fajl importujemo funkciju GoogleProvider iz paketa Next Auth¸
-kreiramo i eksportujemo konfiguracioni objekt authOptions
-u konfiguracionom objektu authOptions kreiramo konfiguracione niz providers i konfiguracioni objekt callbacks
-u niz providers dodajemo funkciju GoogleProvider() sa konfiguracionim objektom
-u objektu callbacks kreiramo asinhrone funkcije signIn() i session()
-funkciji signIn() dodajemo parametar destruktuirani prop profile
-funkciji session() dodajemo parametar destruktuirani prop session
-u app/api/auth/[...nextauth] folderu u route.js fajl importujemo objekt authOptions iz foldera utils
-importujemo i pozivamo funkciju NextAuth iz paketa Next Auth
-vrijednost funkcije NextAuth(authOptions) pohranjujemo u varijablu const handler
-eksportujemo funkciju handler kao GET i POST
-u folderu components kreiramo komponentu AuthProvider.jsx
-u komponentu AuthProvider.jsx dodajemo direktivu 'use client'
-importujemo komponentu SessionProvider iz paketa Next Auth
-kreiramo i eksportujemo funkciju AuthProvider() kao default
-funkciji AuthProvider() dodajemo parametar destruktuirani prop children
-u jsx-u dodajemo komponentu SessionProvider sa otvorenim i zatvorenim tagom
-u komponentu SessionProvider dodajemo prop children
-u komponentu layout.jsx importujemo komponentu AuthProvider.jsx
-u jsx-u, dodajemo komponentu AuthProvider kao roditelj element

31. Sign In Button
-u komponentu Navbar.jsx importujemo funkcije signIn, signOut, useSession i getProviders iz paketa Next Auth
-pozivamo funkciju useSession()
-iz funkcije useSession() destruktuiramo varijablu const { data: session }
-izbrisemo state varijablu isLoggedIn i set funkciju setIsLoggedIn
-u komponenti Navbar.jsx u return izjavi umjesto uslova isLoggedIn && (...) dodajemo session && (...)
-importujemo i pozivamo funkciju useEffect()
-funkciji useEffect() dodajemo dva argumenta: anonimnu funkciju i prazan niz
-u anonimnoj funkciji kreiramo asinhronu funkciju setAuthProviders
-u funkciju setAuthProviders() dodajemo metodu await getProviders()
-vrijednost metode await getProviders pohranjujemo u varijablu res
-kreiramo state varijablu providers i set funkciju setProviders
-u funkciju setAuthProviders() pozivamo funkciju setProviders(res)
-u anonimnoj funkciji pozivamo funkciju setAuthProviders()
-u return izjavi dodajemo metodu {providers && Object?.values(providers)?.map()}
-u funkciji map() kreiramo button element
-button elementu dodajemo prop key, className i onClick
-u button element dodajemo React ikonicu FaGoogle
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju signIn(provider.id)

32. Save User to Database & Session
-u authOptions.js fajl importujemo funkciju connectDB() i model User
-u funkciju signIn() dodajemo funkciju await connectDB()
-dodajemo metodu await User.findOne()
-vrijednost metode await User.findOne() pohranjujemo varijablu const userExists
-dodajemo uslov if (!userExists)
-u uslovu if (!userExists) kreiramo varijablu const username 
-dodajemo metodu await User.create()
-u funkciju create() dodajemo polja key - value parove za email, username i image
-dodajemo izjavu return true
-u funkciji session() dodajemo metodu await User.findOne()
-vrijednost metode metode await User.findOne() pohranjujemo u varijablu const user
-dodajemo metodu session.user.id
-dodajemo izjavu return session
-registrujemo se i prijavimo se u aplikaciji
-provjerimo da li je korisnik uspjesno sacuvan u bazi podataka MongoDB

33. Profile Image
-u next.config.mjs fajl dodajemo konfiguracioni objekt images
-u konfiguracioni objekt images dodajemo niz remotePatterns
-u komponenti Navbar.jsx kreiramo varijablu const profileImage
-u jsx-u, u komponenti Image za korisnika, proslijedujemo u prop src vrijednost varijable profileImage
-komponenti Image dodajemo prop width i height
-u prop alt proslijedujemo dinamicku varijablu name

34. Sign Out Button
-u komponenti Navbar.jsx, button elementu Sign Out dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju dodajemo funkcije setIsProfileMenuOpen(false) i signOut()

35. Protecting Routes
-kreiramo middleware.js fajl
-u middleware.js fajlu eksportujemo funkciju default iz paketa Next Auth
-kreiramo i eksportujemo konfiguracioni objekt varijablu const config
-u objekt config dodajemo konfiguracioni niz matcher
-u niz matcher dodajemo cetiri rute


Section 05: Server Actions & Creating Properties

36. Add Property Form
-u folderu components kreiramo komponentu PropertyAddForm.jsx
-u komponentu app/properties/add/page.jsx importujemo komponentu PropertyAddForm.jsx
-u jsx-u kreiramo section element kao roditelj element
-u section elementu kreiramo dva div elementa sa Tailwind CSS klasama
-u drugi div element dodajemo komponentu PropertyAddForm
-u komponenti PropertyAddForm.jsx, u jsx-u kreiramo form element kao roditelj element
-u form elementu kreiramo HTML elemente sa Tailwind CSS klasama

37. Server Actions
-u folderu app kreiramo folder actions
-u folderu actions kreiramo addProperty.js fajl
-u addProperty.js fajl dodajemo direktivu 'use server'
-u addProperty.js fajlu kreiramo asinhronu funkciju addProperty()
-asinhronu funkciju addProperty() eksportujemo kao default 
-u komponentu PropertyAddForm.jsx importujemo funkciju addProperty
-u jsx-u form elementu dodajemo prop action
-u prop action proslijedujemo funkciju addProperty
-kliknemo dugme Add Property
-u addProperty.js fajlu, funkciji addProperty() dodajemo parametar formData
-u konzoli ispisujemo vrijednost za metodu formData

38. Format Property Data
-u addProperty.js fajlu, u funkciji addProperty(), vrijednost metode formData.getAll('amenities') pohranjujemo u varijable const amenities
-vrijednost metode formData.getAll('images') pohranjujemo u varijable const images
-metodi formData() za slike dodajemo funkcije filter() i map()
-kreiramo objekt varijablu const propertyData
-u objektu propertyData dodajemo podatke o nekretnini

39. Get User From Session
-u folderu utils kreiramo getSessionUser.js fajl
-u getSessionUser.js fajl importujemo funkciju getServerSession iz paketa Next Auth
-importujemo varijablu objekt authOptions iz authOptions.js fajla
-kreiramo i eksportujemo asinhronu funkciju getSessionUser()
-u funkciju getSessionUser() dodajemo blokove koda try - catch
-u blok koda try dodajemo metodu await getServerSession(authOptions)
-vrijednost metode await getServerSession(authOptions) pohranjujemo u varijablu const session
-dodajemo ulsov if (!session || !session.user)
-u blok koda try dodajemo izjavu return objekt i key - value vrijednost user i userId
-u blok koda catch dodajemo console.error(error)

40. Remove Try/Catch From getSessionUser
-u getSessionUser.js fajlu brisemo blokove koda try - catch

41. Submit Property To Database
-u addProperty.js fajl importujemo funkcije redirect, revalidatePath, getSessionUser i connectDB
-importujemo model Property iz Property.js fajla
-u funkciju addProperty() dodajemo metodu await connectDB()
-dodajemo metodu await getSessionUser()
-vrijednost metode await getSessionUser() pohranjujemo u varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.userId)
-u uslov if dodajemo funkciju throw new Error()
-iz varijable sessionUser destruktuiramo varijablu const { userId }
-u objekt propertyData dodajemo key - value par owner i userId
-dodajemo metodu new Property(propertyData)
-vrijednost metode new Property(propertyData) pohranjujemo u varijablu const newProperty
-dodajemo metodu await newProperty.save()
-dodajemo funkcije revalidatePath('/', 'layout') i redirect()
-otvorimo link http://localhost:3000/properties/add i kreiramo nekretninu

42. Custom Error Page
-u folderu app kreiramo komponentu error.jsx 
-u komponentu error.jsx dodajemo direktivu 'use client'
-importujemo komponentu Link i React ikonicu FaExclamationCircle
-kreiramo i eksportujemo funkciju ErrorPage() kao default
-funkciji ErrorPage() dodajemo parametar destruktuirani prop { error }
-u jsx-u kreiramo section element kao roditelj element
-u section elementu kreiramo HTML elemente sa Tailwind CSS klasama
-u p elementu dinamicki prikazujemo vrijednost varijable error
-varijabli error dodajemo funkciju toString()

43. Cloudinary Image Upload
-otvorimo web stranicu https://cloudinary.com/ i kreiramo racun
-u .env.local fajlu kreiramo varijable CLOUDINARY_CLOUD_NAME, CLOUDINARY_API_KEY i CLOUDINARY_API_SECRET
-u example.env fajl dodajemo primjer varijabli koje je potrebno kreirati
-u terminalu instaliramo paket Cloudinary sa komandom npm i cloudinary
-na servisu Cloudinary kreiramo folder udemy-nextjs-propertypulse
-u folderu config kreiramo cloudinary.js fajl
-u cloudinary.js fajl importujemo instancu cloudinary
-varijabli cloudinary dodajemo funkciju config()
-u funkciju config() dodajemo konfiguracioni objekt
-u konfiguracioni objekt dodajemo varijable cloud_name, api_key i api_secret
-varijablu cloudinary eksportujemo kao default
-u addProperty.js fajl importujemo varijablu cloudinary iz cloudinary.js fajla
-kreiramo varijablu prazan niz const imageUrls 
-dodajemo petlju for (const imageFile of images)
-u petlju for dodajemo metodu await imageFile.arrayBuffer()
-vrijednost metode await imageFile.arrayBuffer() pohranjujemo u varijablu const imageBuffer
-dodajemo metodu Array.from()
-vrijednost metode Array.from() pohranjujemo u varijablu const imageArray
-dodajemo metodu Buffer.from(imageArray)
-vrijednost metode Buffer.from(imageArray) pohranjujemo u varijablu const imageData
-dodajemo metodu imageData.toString()
-vrijednost metode imageData.toString() pohranjujemo u varijablu const imageBase64
-dodajemo metodu await cloudinary.uploader.upload()
-funkciji upload() dodajemo dva argumenta
-prvi argument je ime link slike
-drugi argument je konfiguracioni objekt u kojem se nalazi ime foldera 
-vrijednost metode await cloudinary.uploader.upload() pohranjujemo u varijablu const result
-dodajemo metodu imageUrls.push(result.secure_url)
-dodajemo metodu propertyData.images = imageUrls
-otvorimo rutu http://localhost:3000/properties/add i kreiramo nekretninu
-na web stranici Cloudinary otvorimo folder udemy-nextjs-propertypulse da provjerimo da li su se slike sacuvale

44. PropertyCard & Header Images
-u next.config.mjs fajl dodajemo konfiguracioni objekt za Cloudinary slike 
-u bazi podataka MongoDB izbrisemo nekretnine koje nemaju slike sacuvane na servisu Cloudinary 
-u komponenti PropertyCard.jsx pravimo izmjene u komponenti Image, u prop src
-u komponenti PropertyHeaderImage.jsx pravimo izmjene u komponenti Image, u prop src

45. PropertyImages Component
-u folderu components kreiramo komponentu PropertyImages.jsx
-u komponenti PropertyImages.jsx, funkciji PropertyImages() dodajemo parametar destruktuirani prop images
-u jsx-u kreiramo section roditelj element
-u komponentu properties/[id]/page.jsx importujemo komponentu PropertyImages
-u jsx-u dodajemo komponentu PropertyImages sa prop images
-u komponentu PropertyImages.jsx importujemo komponentu Image
-u section elementu kreiramo div element sa Tailwind CSS klasama
-u div element ternarni uslov images.length === 1
-u prvi dio ternarnog uslova dodajemo komponentu Image
-u drugi dio ternarnog uslova kreiramo div element sa Tailwind CSS Grid klasama
-u div element dodajemo metodu images.map()
-u funkciju map() dodajemo komponentu Image
-u funkciju map(), div elementu dodajemo dinamicku klasu ako nekretnina ima 3 slike


Section 06: Profile & Manage Properties

46. User Profile Info Display
-u folderu app kreiramo folder profile i komponentu page.jsx
-u komponenti profile/page.jsx, u jsx-u kreiramo section roditelj element
-u section elementu kreiramo HTML elemente sa Tailwind CSS klasama
-importujemo funkciju getSessionUser iz getServerSession.js fajla
-importujemo funkciju connectDB iz database.js fajla
-importujemo komponentu Image iz paketa Next Image
-importujemo model Property iz Property.js fajla
-importujemo sliku profileDefault iz foldera images
-funkciji ProfilePage() dodajemo asinhronost
-u funkciju ProfilePage() dodajemo metodu await connectDB()
-dodajemo metodu await getSessionUser()
-vrijednost metode await getSessionUser() pohranjujemo u varijablu const sessionUser
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-dodajemo uslov if (!userId)
-u uslov if (!userId) dodajemo funkciju throw new Error()
-u jsx-u komponenti Image dodajemo prop className, src, alt, width i height
-u prop src dodajemo dinamicku vrijednost za sliku

47. User Profile Listings
-u komponentu profile/page.jsx dodajemo metodu await Property.find()
-vrijednost metode await Property.find() pohranjujemo u varijablu const properties
-u folderu components kreiramo komponentu ProfileProperties.jsx
-u komponentu ProfileProperties.jsx dodajemo direktivu 'use client'
-funkciji ProfileProperties() dodajemo destruktuirani parametar properties: initialProperties
-importujemo funkciju useState
-kreiramo state varijablu const properties i set funkciju setProperties
-u izjavu return dodajemo metodu properties.map()
-u funkciji map() kreiramo HTML elemente sa Tailwind CSS klasama
-u komponentu profile/page.jsx importujemo komponentu ProfileProperties.jsx
-u jsx-u dodajemo komponentu ProfileProperties sa prop properties
-u komponentu ProfileProperties.jsx importujemo komponentu Image
-u jsx-u dinamicki prikazujemo podatke o nekretninama
-u funkciji map() div elementu dodajemo prop key i className

48. Serialize Lean Documents
-u folderu utils kreiramo convertToObject.js fajl
-u convertToObject.js fajlu kreiramo i eksportujemo funkciju convertToSerializableObject() sa parametrom leanDocument
-u funkciju convertToSerializableObject() dodajemo petlju for()
-u komponentu profile/page.jsx importujemo funkciju convertToSerializableObject
-preimenujemo varijablu const properties u varijablu const propertiesDocs
-dodajemo metodu propertiesDocs.map()
-vrijednost metode propertiesDocs.map() pohranjujemo u varijablu const properties
-u komponentu ProfileProperties.jsx importujemo komponentu Link
-u jsx-u umjesto a elementa dodajemo komponentu Link
-u komponenti properties/[id]/page.jsx preimenujemo varijablu const property u const propertyDoc
-dodajemo metodu convertToSerializableObject(propertyDoc)
-vrijednost metode convertToSerializableObject(propertyDoc) pohranjujemo u varijablu const property
-dodajemo uslov if (!property)
-u uslov if dodajemo izjavu return i h2 element 
-u komponenti Navbar.jsx, komponentama Link dodajemo prop onClick
-u prop onClick proslijedujemo anonimne funkcije
-u anonimne funkcije proslijedujemo funkciju setIsProfileMenuOpen(false)

49. Deleting Properties
-u folderu actions kreiramo deleteProperty.js fajl
-u deleteProperty.js fajl dodajemo direktivu 'use server'
-importujemo instancu cloudinary iz paketa Cloudinary
-importujemo funkcije connectDB, getSessionUser i revalidatePath
-importujemo model Property iz Property.js fajla
-u funkciju deleteProperty() dodajemo metodu await getSessionUser()
-vrijednost metode await getSessionUser() pohranjujemo u varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.userId)
-u uslov if dodajemo funkciju throw new Error()
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-dodajemo metodu await Property.findById(propertyId)
-vrijednost metode await Property.findById(propertyId) pohranjujemo u varijablu const property
-dodajemo uslov if (!property)
-u uslov if (!property) dodajemo funkciju throw new Error()
-dodajemo uslov if (property.owner.toString() !== userId)
-u uslov if dodajemo funkciju throw new Error()
-dodajemo metodu property.images.map()
-vrijednost metode property.images.map() pohranjujemo u varijablu const publicIds
-u funkciji map() kreiramo varijablu const parts
-dodajemo izjavu return parts
-dodajemo uslov if (publicIds.length > 0)
-u uslovu if dodajemo petlju for (let publicId of publicIds)
-u petlju for() dodajemo await cloudinary.uploader.destroy()
-dodajemo metodu await property.deleteOne()
-dodajemo funkciju revalidatePath('/', 'layout')
-u komponentu ProfileProperties.jsx importujemo funkciju deleteProperty iz deleteProperty.js fajla
-kreiramo asinhronu funkciju handleDeleteProperty() sa parametrom propertyId
-u funkciji handleDeleteProperty() kreiramo varijablu const confirmed
-dodajemo uslov if (!confirmed) return
-dodajemo metodu await deleteProperty(propertyId)
-dodajemo metodu properties.filter()
-vrijednost metode properties.filter() pohranjujemo u varijablu const updatedProperties
-dodajemo funkcije setProperties(updatedProperties)
-u jsx-u button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo anonimnu funkciju
-u anonimnu funkciju proslijedujemo funkciju handleDeleteProperty()
-dodajemo Google Chrome ekstenziju Fake Filler za automatsko popunjavanje forme prilikom kreiranja nekretnine
-kreiramo jednu nekretninu sa slikama i obrisemo je
-provjerimo da li su slike obrisane na servisu Cloudinary

50. Toast Notifications
-otvorimo link: https://www.npmjs.com/package/react-toastify
-u terminalu instaliramo paket React Toastify sa komandom npm i react-toastify
-u komponentu layout.jsx importujemo komponentu ToastContainer iz paketa React Toastify
-dodajemo CSS stil za komponentom ToastContainer
-u body element dodajemo komponentu ToastContainer
-u komponentu ProfileProperties importujemo funkciju toast iz paketa React Toastify
-u funkciju handleDeleteProperty() dodajemo funkciju toast.success()

51. Edit Property Form
-u komponenti ProfileProperties.jsx, umjesto a elementa za uredivanje nekretnina dodajemo komponentu Link
-komponenti Link dodajemo dinamicki prop href
-u folderu properties/[id] kreiramo folder edit i komponentu page.jsx
-u komponenti properties/[id]/page.jsx, u funkciji PropertyEditPage() kreiramo section roditelj element
-u section elementu kreiramo dva div elemente sa Tailwind CSS klasama
-u folderu components kreiramo komponentu PropertyEditForm.jsx
-u komponentu properties/[id]/page.jsx importujemo komponentu PropertyEditForm.jsx
-u jsx-u, u drugi div element dodajemo komponentu PropertyEditForm
-funkciji PropertyEditPage() dodajemo parametar destruktuirani prop params
-importujemo funkcije convertToSerializableObject i connectDB
-importujemo model Property iz Property.js fajla
-funkciji PropertyEditPage() dodajemo asinhronost
-u funkciju PropertyEditPage() dodajemo metodu await connectDB()
-dodajemo metodu await Property.findById()
-vrijednost metode Property.findById() pohranjujemo u varijablu const propertyDoc
-dodajemo metodu convertToSerializableObject(propertyDoc)
-vrijednost metode convertToSerializableObject(propertyDoc) pohranjujemo u varijablu const property
-dodajemo uslov if (!property)
-u uslov if (!property) dodajemo izjavu return i h2 element
-u jsx-u komponenti PropertyEditForm dodajemo prop property
-u komponenti PropertyEditForm.jsx, funkciji PropertyEditForm() dodajemo parametar destruktuirani prop property
-u jsx-u kreiramo form roditelj element
-u form elementu kreiramo HTML elemente sa Tailwind CSS klasama
-u jsx-u input elementima dodajemo prop defaultValue
-input elementima za amenities dodajemo prop defaultChecked

52. Update Property Action
-u folderu actions kreiramo updateProperty.js fajl
-u updateProperty.js dodajemo direktivu 'use server'
-u updateProperty.js fajlu kreiramo asinhronu funkciju updateProperty() sa parametrima propertyId i formData
-funkciju updateProperty eksportujemo kao default
-importujemo funkcije revalidatePath, redirect, getServerSession i connectDB
-importujemo model Property iz Property.js fajla
-u funkciju updateProperty() dodajemo metodu await connectDB()
-kreiramo varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.userId)
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-dodajemo metodu await Property.findById(propertyId)
-vrijednost metode await Property.findById(propertyId) pohranjujemo u varijablu const existingProperty 
-dodajemo uslov if (existingProperty.owner.toString() !== userId)
-u uslov if dodajemo funkciju throw new Error()
-kreiramo varijablu const amenities
-kreiramo varijablu objekt const propertyData
-dodajemo metodu await Property.findByIdAndUpdate()
-vrijednost metode await Property.findByIdAndUpdate() pohranjujemo u varijablu const updatedProperty
-dodajemo funkcije revalidatePath() i redirect()
-u komponentu PropertyEditForm.jsx importujemo funkciju updateProperty iz updateProperty.js fajla
-u funkciju PropertyEditForm() dodajemo metodu updateProperty.bind()
-vrijednost metode updateProperty.bind() pohranjujemo u varijablu const updatePropertyById
-u jsx-u elementu form dodajemo prop action
-u prop action proslijedujemo funkciju updatePropertyById


Section 07: Map, Bookmarks & Sharing

53. Geocode For Latitude & Longitude
-otvorimo web stranicu https://console.cloud.google.com/
-u .env.local fajlu kreiramo env varijablu NEXT_PUBLIC_GOOGLE_GEOCODING_API_KEY
-u example.env fajl dodajemo primjer varijable koju je potrebno kreirati
-u folderu components kreiramo komponentu PropertyMap.jsx
-u komponentu PropertyMap() dodajemo direktivu 'use client'
-funkciji PropertyMap() dodajemo parametar destruktuirani prop property
-u komponentu PropertyDetails.jsx importujemo komponentu PropertyMap.jsx
-u jsx-u dodajemo komponenti PropertyMap prop property
-otvorimo link: https://www.npmjs.com/package/react-geocode
-otvorimo link: https://www.npmjs.com/package/mapbox-gl
-otvorimo link: https://www.npmjs.com/package/react-map-gl
-u terminalu instaliramo pakete React Geocode, Mapbox GL i React Map GL
-u komponentom PropertyMap.jsx importujemo funkcije useState i useEffect iz paketa React
-importujemo funkcije setDefaults i fromAddress iz paketa React Geocode
-kreiramo state varijablu const lat i set funkciju setLat
-kreiramo state varijablu const lng i set funkciju setLng
-kreiramo state varijablu const viewport i set funkciju setViewport
-kreiramo state varijablu const loading i set funkciju setLoading
-kreiramo state varijablu const geocodeError i set funkciju setGeocodeError
-pozivamo funkciju setDefaults()
-u funkciju setDefaults() dodajemo konfiguracioni objekt
-u konfiguracioni objekt dodajemo opcije key, language i region
-pozivamo funkciju useEffect() sa dva argumenta
-prvi argument je anonimna funkcija a drugi argument prazan niz
-u anonimnoj funkciji kreiramo asinhronu funkciju fetchCoords
-pozivamo funkciju fetchCoords()
-u funkciju fetchCoords() dodajemo blokove koda try, catch i finally
-u blok koda finally dodajemo funkciju setLoading(false)
-u blok koda catch dodajemo funkciju setGeocodeError(true)
-u blok koda try dodajemo metodu await fromAddress()
-vrijednost metode await fromAddress() pohranjujemo u varijablu const res
-dodajemo uslov if (res.results.length === 0)
-u uslov if dodajemo funkciju setGeocodeError(true)
-dodajemo izjavu return
-destruktuiramo varijable const { lat, lng }
-pozivamo funkcije setLat(lat), setLng(lng) i setViewport()
-dodajemo uslove if (loading) i if (geocodeError)

54. Mapbox Map Display
-otvorimo web stranicu: https://www.mapbox.com/
-u .env.local fajlu kreiramo env varijablu NEXT_PUBLIC_MAPBOX_TOKEN
-u example.env fajlu kreiramo primjer varijable koju je potrebno kreirati
-u folderu components kreiramo komponentu Spinner.jsx
-u komponentu PropertyMap.jsx importujemo komponente Map, Marker i NavigationControl iz paketa React Map GL
-importujemo komponentu Image
-importujemo sliku pin iz foldera images
-importujemo komponentu Spinner.jsx
-u uslov if (loading) dodajemo komponentu Spinner
-u jsx-u dodajemo uslov kondicionalno renderovanje !loading && 
-u uslov za kondicionalno renderovanje dodajemo komponentu Map sa otvorenim i zatvorenim tagom
-komponenti Map dodajemo prop mapboxAccessToken, mapLib, initialViewState, style i mapStyle
-u komponentu Map dodajemo komponentu Marker sa otvorenim i zatvorenim tagom
-komponenti Marker dodajemo prop longitude, latitude i anchor
-u komponentu Marker dodajemo komponentu Image
-u komponentu Map dodajemo komponentu NavigationControl sa prop position

55. Property Page Sidebar
-u komponenti properties/[id]/page.jsx, u jsx-u kreiramo aside element sa prop className
-u folderu components kreiramo komponente BookmarkButton.jsx, ShareButtons.jsx i PropertyContactForm.jsx
-u element aside dodajemo importovane komponente
-svakoj komponenti dodajemo prop property
-u komponentu BookmarkButton.jsx importujemo React ikonicu FaBookmark
-funkciji BookmarkButton() dodajemo parametar destruktuirani prop property
-u jsx-u kreiramo button element sa Tailwind CSS klasama
-u button element dodajemo komponentu FaBookmark
-u komponentu ShareButtons.jsx importujemo React ikonicu FaShare
-funkciji ShareButtons() dodajemo parametar destruktuirani prop property
-u jsx-u kreiramo button element sa Tailwind CSS klasama
-u button element dodajemo komponentu FaShare
-u komponentu PropertyContactForm.jsx importujemo React ikonicu FaPaperPlane
-funkciji PropertyContactForm() dodajemo parametar destruktuirani prop property
-u jsx-u kreiramo div element kao roditelj element sa Tailwind CSS klasama
-u roditelj div elementu kreiramo vise HTML elemenata sa Tailwind CSS klasama

56. Bookmark Property Action
-u folderu actions kreiramo bookmarkProperty.js fajl
-u bookmarkProperty.js fajl dodajemo direktivu 'use server'
-importujemo funkcije revalidatePath, getSessionUser i revalidatePath
-importujemo mode User iz User.js fajla
-kreiramo asinhronu funkciju bookmarkProperty() sa parametrom propertyId
-funkciju bookmarkProperty eksportujemo kao default 
-u funkciju bookmarkProperty() dodajemo metodu await connectDB()
-dodajemo metodu await getSessionUser()
-vrijednost metode await getSessionUser() pohranjujemo u varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.userId)
-u uslov if dodajemo funkciju throw new Error()
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-dodajemo metodu await User.findById(userId)
-vrijednost metode await User.findById(userId) pohranjujemo u varijablu const user
-kreiramo varijablu let isBookmarked
-kreiramo varijablu let message
-dodajemo uslov if (isBookmarked) - else
-u uslov if (isBookmarked) dodajemo metodu user.bookmarks.pull(propertyId)
-redeklarisemo varijablu message da je bookmark izbrisan
-dodajemo varijabli isBookmarked vrijednost false
-u uslov else dodajemo metodu user.bookmarks.push(propertyId)
-redeklarisemo varijablu message da je bookmark dodan
-dodajemo varijabli isBookmarked vrijednost true
-nakon uslova if - else dodajemo metodu await save.user()
-pozivamo funkciju revalidatePath()
-dodajemo izjavu return objekt
-u objekt dodajemo varijable message i isBookmarked

57. Bookmark Button Functionality
-u komponentu BookmarkButton.jsx dodajemo direktivu 'use client'
-importujemo funkcije useSession, toast i bookmarkProperty
-u funkciji BookmarkButton() kreiramo asinhronu funkciju handleBookmarkProperty()
-dodajemo funkciju useSession()
-vrijednost funkcije useSession() pohranjujemo u destruktuiranu varijablu const { data: session }
-kreiramo varijablu const userId
-u funkciju handleBookmarkProperty() dodajemo uslov if(!userId)
-u uslov if(!userId) dodajemo funkciju toast.error()
-dodajemo metodu bookmarkProperty(property._id).then()
-u jsx-u button elementu dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju handleBookmarkProperty
-kliknemo dugme Bookmark Property
-u bazi podataka MongoDB provjerimo da li se sacuvao bookmark u kolekciji za korisnike

58. Check Bookmark Status
-u komponentu BookmarkButton.jsx importujemo funkcije useState i useEffect iz paketa React
-kreiramo state varijablu const isBookmarked i set funkciju setIsBookmarked
-kreiramo state varijablu const loading i set funkciju setLoading
-u jsx-u dodajemo ternarni uslov za varijablu isBookmarked 
-u prvi dio ternarnog operatora dodajemo crveno dugme
-u drugi dio ternarnog operatora dodajemo plavo dugme
-u funkciju then() dodajemo funkciju setIsBookmarked(res.isBookmarked)
-u folderu actions kreiramo checkBookmarkStatus.js fajl
-u checkBookmarkStatus.js fajl dodajemo direktivu 'use client'
-importujemo funkcije getSessionUser i connectDB
-importujemo model User iz User.js fajla
-kreiramo i eksportujemo asinhronu funkciju checkBookmarkStatus() sa parametrom propertyId
-funkciju checkBookmarkStatus() eksportujemo kao default
-u funkciju checkBookmarkStatus() dodajemo metodu await connectDB()
-kreiramo varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.userId)
-destruktuiramo varijablu const { userId }
-kreiramo varijable const user i let isBookmarked 
-dodajemo izjavu return objekt
-u objekt dodajemo varijablu isBookmarked
-u komponentu BookmarkButton.jsx importujemo funkciju checkBookmarkStatus
-pozivamo funkciju useEffect() sa dva argumenta
-prvi argument je anonimna funkcija a drugi argument je niz
-u niz dodajemo varijable property._id, userId i checkBookmarkStatus
-u anonimnu funkciju dodajemo uslov if (!userId)
-u uslov if (!userId) dodajemo funkciju setLoading(false) i izjavu return
-dodajemo metodu checkBookmarkStatus(property._id).then()
-u funkciju then() dodajemo uslov if (res.error) 
-u uslov if (res.error) dodajemo funkciju toast.error(res.error)
-dodajemo uslov if (res.isBookmarked)
-u uslov if (res.isBookmarked) dodajemo funkciju setIsBookmarked()
-nakon uslova if dodajemo funkciju setLoading(false)

59. Saved Properties Page
-u folderu app/properties kreiramo folder saved i komponentu page.jsx
-u komponentu saved/page.jsx importujemo funkcije getSessionUser i connectDB
-importujemo model User iz User.js fajla
-importujemo komponentu PropertyCard.jsx
-funkciji SavedPropertiesPage() dodajemo asinhronost
-u funkciju SavedPropertiesPage() dodajemo metodu await connectDB()
-dodajemo metodu await getSessionUser()
-vrijednost metode await getSessionUser() pohranjujemo u varijablu const sessionUser
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-dodajemo metodu await User.findById()
-vrijednost metode await User.findById() pohranjujemo u varijablu const user
-destruktuiramo varijablu const { bookmarks } iz varijable user
-u jsx-u kreiramo section roditelj element sa Tailwind CSS klsama
-u section elementu kreiramo div i h2 elemente sa Tailwind CSS klasama
-u div elementu dodajemo ternnarni uslov bookmarks.length === 0
-u prvi dio ternarnog uslova dodajemo p element
-u drugi dio ternarnog uslova dodajemo div element sa Tailwind CSS Grid klasama
-u div element dodajemo metodu bookmarks.map()
-u funkciju map() dodajemo komponentu PropertyCard
-komponenti PropertyCard dodajemo prop key i property

60. Share Buttons
-otvorimo link: https://www.npmjs.com/package/react-share
-u terminalu instaliramo paket React Share sa komandom npm i react-share
-u komponentu ShareButtons.jsx dodajemo direktivu 'use client'
-importujemo komponente iz paketa React Share
-kreiramo varijablu const shareUrl
-u jsx-u dodajemo prazan fragment kao roditelj element
-u praznom fragment elementu kreiramo elemente h3 i div sa Tailwind CSS klasama
-u div element dodajemo komponentu FacebookShareButton sa otvorenim i zatvorenim tagom
-komponenti FacebookShareButton dodajemo prop url, quote i hashtah
-u komponentu FacebookShareButton dodajemo komponentu FacebookIcon sa samozatvarajucim tagom
-komponenti FacebookIcon dodajemo prop size i round
-u jsx-u dodajemo ostale komponente iz paketa React Share


Section 08. Property Search

61. Property Search Component
-u folderu components kreiramo komponentu PropertySearchForm.jsx
-u komponenti PropertySearchForm.jsx, u jsx-u kreiramo form element kao roditelj element
-u form elementu kreiramo vise HTML elemenata sa Tailwind CSS klasama
-u komponentu Hero.jsx importujemo komponentu PropertySearchForm.jsx
-u komponentu PropertySearchForm.jsx dodajemo direktivu 'use client'
-importujemo funkcije useState i useRouter
-kreiramo state varijablu const location i set funkciju setLocation
-kreiramo state varijablu const propertyType i set funkciju setPropertyType
-dodajemo funkciju useRouter()
-vrijednost funkcije useRouter() pohranjujemo u varijablu const router
-u jsx-u input elementu za lokaciju dodajemo prop value i onChange
-u prop value proslijedujemo vrijednost varijable location
-u dogadaj onChange proslijedujemo anonimnu funkciju sa parametrom e
-u anonimnu funkcija dodajemo funkciju setLocation(e.target.value)
-select elementu za tip nekretnine dodajemo prop value i onChange
-u prop value proslijedujemo vrijednost varijable propertyType
-u dogadaj onChange proslijedujemo anonimnu funkciju sa parametrom e
-u anonimnu funkcija dodajemo funkciju setPropertyType(e.target.value)
-kreiramo funkciju handleSubmit() sa parametrom e
-u funkciju handleSubmit() dodajemo metodu e.preventDefault()
-dodajemo uslove if - else
-dodajemo u uslov if (location === '' && propertyType === 'All') 
-u uslov if dodajemo metodu router.push('/properties')
-u uslovu else kreiramo varijablu const query
-dodajemo metodu router.push()
-u jsx-u form elementu dodajemo dogadaj onSubmit
-u dogadaj onSubmit proslijedujemo funkciju handleSubmit
-unesemo lokaciju, tip nekretnine i kliknemo dugme Search
-otvorimo link: http://localhost:3000/properties/search-results?location=Boston&propertyType=Studio

62. Fetch Search Results
-u folderu properties kreiramo folder search-results
-funkciji SearchResultsPage() dodajemo parametar destruktuirani prop searchParams
-funkciji SearchResultsPage() dodajemo asinhronost
-importujemo funkcije convertToSerializableObject, connectDB i model Property
-u funkciju SearchResultsPage() dodajemo metodu await connectDB()
-kreiramo varijablu const locationPattern
-kreiramo varijablu objekt let query
-u objekt qeury dodajemo niz $or
-dodajemo uslov if (propertyType && propertyType !== 'All')
-u uslovu if kreiramo varijablu const typePattern
-dodajemo metodu await Property.find(query)
-vrijednost metode await Property.find(query) pohranjujemo u varijablu const propertiesQueryResults
-dodajemo metodu propertiesQueryResults.map()
-vrijednost metode propertiesQueryResults.map() pohranjujemo u varijablu const properties

63. Display Search Results
-u komponentu seach-results/page.jsx importujemo komponentu Link iz paketa Next Navigation
-importujemo komponente PropertyCard.jsx i PropertySearchForm.jsx
-importujemo React ikonicu FaArrowAltCircleLeft
-u jsx-u kreiramo element prazan fragment kao roditelj element
-u praznom fragmentu kreiramo dva section elementa
-u prvom section elementu kreiramo div element
-u div element dodajemo komponentu PropertySearchForm
-u drugom section elementu kreiramo div element
-u div element dodajemo komponentu Link
-kreiramo h2 element
-HTML elementima dodajemo Tailwind CSS klase
-dodajemo ternarni operator properties.length === 0
-u prvi dio ternarnog uslova dodajemo p element
-u drugi dio ternarnog uslova dodajemo div element sa Tailwind CSS Grid klasama
-u div element dodajemo metodu properties.map()
-u funkciju map() dodajemo komponentu PropertyCard
-komponenti PropertyCard dodajemo prop key i property


Section 09: Messaging System

64. Message Model & addMessage Action
-u folderu models kreiramo Message.js fajl
-u Message.js fajlu kreiramo varijablu const MessageSchema 
-kreiramo i eksportujemo varijablu const Message kao default
-u folderu actions kreiramo addMessage.js fajl
-u addMessage.js fajl dodajemo direktivu 'use server'
-importujemo funkcije getSessionUser i connectDB
-importujemo model Message iz Message.js fajla
-kreiramo i eksportujemo asinhronu funkciju addMessage() sa parametrom formData
-u funkciju addMessage() dodajemo funkciju await connectDB()
-kreiramo varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.user) 
-iz varijable sessionUser destruktuiramo varijablu const { userId }
-kreiramo varijablu const recipient
-dodajemo uslov if (userId === recipient) 
-kreiramo varijablu const newMessage
-dodajemo metodu await newMessage.save()
-dodajemo izjavu return { submitted: true }

65. Submit Message & useFormState Hook
-u komponentu PropertyContactForm.jsx importujemo funkciju useEffect iz paketa React
-importujemo funkcije useFormState i useFormStatus iz paketa React Dom
-importujemo funkciju useSession iz paketa Next Auth
-importujemo funkciju toast iz paketa React Toastify
-importujemo funkciju addMessage iz addMessage.js fajla
-u funkciju PropertyContactForm() pozivamo funkciju useSession()
-vrijednost funkcije useSession() pohranjujemo u varijablu const { data: session } 
-u jsx-u dodajemo uslov za kondicionalno renderovanje session && 
-u jsx-u kreiramo dva input elementa sa prop type, id, name i defaultValue
-pozivamo funkciju useFormState(addMessage, {})
-vrijednost funkcije useFormState() pohranjujemo u varijable const [state, formAction]
-dodajemo uslov if (state.submitted)
-u uslovu if kreiramo p element sa Tailwind CSS klasama
-pozivamo funkciju useEffect() sa dva argumenta
-prvi argument je anonimna funkcija, a drugi argument je niz
-u niz dodajemo varijablu state
-u anonimnu funkciju dodajemo dva uslova if
-u jsx-u form elementu dodajemo prop action
-u prop action proslijedujemo funkciju formAction
-u jsx-u input elementima dodajemo prop name
-u addMessage.js fajlu, funkciji addMessage() dodajemo parametar previousState

66. useFormStatus Hook
-otvorimo link: https://react.dev/reference/react-dom/hooks/useFormStatus
-u folderu components kreiramo komponentu SubmitMessageButton.jsx
-u komponentu PropertyContactForm.jsx importujemo komponentama SubmitMessageButton.jsx
-u komponentu SubmitMessageButton.jsx importujemo funkciju useFormStatus iz paketa React Dom
-u funkciji SubmitMessageButton() pozivamo funkciju useFormStatus()
-vrijednost funkcije useFormStatus() pohranjujemo u destruktuiranu varijablu const { pending }
-u jsx-u button elementu dodajemo prop disabled
-u prop disabled proslijedujemo varijablu pending
-u button elementu dodajemo uslov ternarni operator za varijablu pending

67. Fetch Messages
-u folderu app kreiramo folder messages i komponentu page.jsx
-importujemo funkcije getSessionUser, convertToSerializableObject i connectDB
-importujemo modele Message i Property
-funkciji MessagesPage() dodajemo asinhronost
-u funkciju MessagesPage() pozivamo funkciju await connectDB()
-kreiramo varijablu const sessionUser
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-kreiramo varijable const readMessages, const unreadMessages i const messages
-varijabli const messages dodajemo funkciju map()
-u funkciji map() kreiramo varijablu const message i pristupamo varijablama message.sender i message.property
-dodajemo izjavu return message
-u jsx-u kreiramo section element kao roditelj element sa Tailwind CSS klasama
-u div elementu sa klasom space-y-4 dodajemo ternarni operator messages.length === 0
-u prvi dio ternarnog operatora dodajemo p element 
-u drugi dio ternarnog operatora dodajemo metodu messages?.map()

68. Display Messages
-u folderu components kreiramo komponentu MessageCard.jsx
-funkciji MessageCard() dodajemo parametar destruktuirani prop message
-u komponentu messages/page.jsx importujemo komponentu MessageCard.jsx
-u jsx-u, u funkciji map() komponenti MessageCard dodajemo prop key i message
-u komponenti MessageCard.jsx, u jsx-u kreiramo HTML elemente sa Tailwind CSS klasama

69. Mark As Read
-u folderu actions kreiramo markMessageAsRead.js fajl
-u markMessageAsRead.js fajl dodajemo direktivu 'use server'
-importujemo funkcije revalidatePath, getSessionUser i connectDB
-importujemo model Message iz Message.js fajla
-kreiramo i eksportujemo asinhronu funkciju markMessageAsRead() kao default
-funkciji markMessageAsRead() dodajemo parametar messageId
-u funkciji markMessageAsRead() pozivamo funkciju await connectDB()
-kreiramo varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.user)
-u uslov if dodajemo funkciju throw new Error()
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-kreiramo varijablu const message 
-dodajemo uslov if (!message)
-u uslov if (!message) dodajemo funkciju throw new Error()
-dodajemo uslov if (message.recipient.toString() !== userId)
-u uslov if dodajemo funkciju throw new Error()
-pristupamo varijabli message.read
-pozivamo funkciju revalidatePath()
-pozivamo funkciju await message.save()
-dodajemo izjavu return message.read
-komponenti MessageCard.jsx dodajemo direktivu 'use client'
-importujemo funkcije useState, toast i markMessageAsRead
-kreiramo state varijablu const isRead i set funkciju setIsRead
-button elementu Mark As Read dodajemo dogadaj onClick
-kreiramo asinhronu funkciju handleReadClick()
-u dogadaj onClick proslijedujemo funkciju handleReadClick()
-u button element dodajemo ternarni uslov za varijablu isRead
-u funkciji handleReadClick() kreiramo varijablu const read
-pozivamo funkciju setIsRead()
-pozivamo funkciju toast.success()
-u jsx-u dodajemo uslov !isRead && za kondicionalno renderovanje div elementa

70. Delete Messages
-u folderu actions kreiramo deleteMessage.js fajl
-u deleteMessage.js fajl importujemo funkcije revalidatePath, getSessionUser i connectDB
-importujemo model Message iz Message.js fajla
-kreiramo i eksportujemo kao default asinhronu funkciju deleteMessage()
-funkciji deleteMessage() dodajemo parameter messageId
-u funkciji deleteMessage() pozivamo funkciju await connectDB()
-kreiramo varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.user)
-u uslov if dodajemo funkciju throw new Error()
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-kreiramo varijablu const message 
-dodajemo uslov if (!message) 
-u uslov if (!message) dodajemo funkciju throw new Error()
-dodajemo uslov if (message.recipient.toString() !== userId)
-u uslov if dodajemo funkciju throw new Error()
-pozivamo funkciju revalidatePath()
-pozivamo metodu await message.deleteOne()
-u komponentu MessageCard.jsx importujemo funkciju deleteMessage iz deleteMessage.js fajla
-kreiramo state varijablu const isDeleted i set funkciju setIsDeleted
-kreiramo asinhronu funkciju handleDeleteClick()
-u funkciji handleDeleteClick() pozivamo funkcije await deleteMessage(), setIsDeleted(true) i toast.success()
-button elementu za brisanje dodajemo dogadaj onClick
-u dogadaj onClick proslijedujemo funkciju handleDeleteClick
-dodajemo uslov if (isDeleted)
-u uslovu if (isDeleted) kreiramo p element

71. Global Context For Message Count
-kreiramo folder context i GlobalContext.js fajl
-u GlobalContext.js dodajemo direktivu 'use client'
-importujemo funkcije createContext, useContext i useState iz paketa React
-pozivamo funkciju createContext()
-vrijednost funkcije createContext() pohranjujemo u varijablu const GlobalContext 
-kreiramo i eksportujemo funkciju GlobalProvider() 
-funkciji GlobalProvider() dodajemo parametar destruktuirani prop children
-kreiramo state varijablu unreadCount i set funkciju setUnreadCount
-u return izjavi dodajemo komponentu GlobalContext.Provider sa otvorenim i zatvorenim tagom
-komponenti GlobalContext.Provider dodajemo prop value
-u komponentu GlobalContext.Provider dodajemo prop children
-kreiramo i eksportujemo funkciju useGlobalContext()
-u funkciju useGlobalContext() dodajemo izjavu return useContext(GlobalContext)
-u komponentu layout.jsx importujemo funkciju GlobalProvider
-u jsx-u dodajemo komponentu GlobalProvider sa otvorenim i zatvorenim tagom
-kreiramo komponentu UnreadMessageCount.jsx
-u komponentu UnreadMessageCount.jsx dodajemo direktivu 'use client'
-importujemo i pozivamo funkciju useGlobalContext()
-vrijednost funkcije useGlobalContext() pohranjujemo u destruktuiranu varijablu const { unreadCount }
-u jsx-u kreiramo span element sa Tailwind CSS klasama
-u span element dodajemo varijablu unreadCount
-u komponentu Navbar.jsx importujemo komponentu UnreadMessageCount.jsx
-importujemo React ikonice FaRegBell, RxHamburgerMenu i IoMdClose
-u span element dodajemo ternarni uslov za varijablu isMobileMenuOpen 

72. Get Unread Message Count
-u folderu actions kreiramo getUnreadMessageCount.js fajl
-u getUnreadMessageCount.js fajl dodajemo direktivu 'use server'
-importujemo funkcije getSessionUser i connectDB
-importujemo model Message iz Message.js fajla
-kreiramo i eksportujemo asinhronu funkciju getUnreadMessageCount() kao default
-u funkciji getUnreadMessageCount() pozivamo funkciju await connectDB()
-kreiramo varijablu const sessionUser
-dodajemo uslov if (!sessionUser || !sessionUser.user)
-u uslov if dodajemo izjavu return objekt poruku 
-destruktuiramo varijablu const { userId } iz varijable sessionUser
-dodajemo metodu await Message.countDocuments()
-vrijednost metode await Message.countDocuments() pohranjujemo u varijablu const count
-dodajemo izjavu return { count }
-u GlobalContext.js fajl importujemo funkcije useSession i getUnreadMessageCount
-u funkciji GlobalProvider() pozivamo funkciju useSession()
-vrijednost funkcije useSession() pohranjujemo u destruktuiranu varijablu const { data: session }
-importujemo i pozivamo funkciju useEffect() sa dva argumenta
-prvi argument je anonimna funkcija, a drugi argument je niz
-u niz dodajemo funkciju getUnreadMessageCount i varijablu session
-u anonimnu funkciju dodajemo uslov if (session && session.user)
-u uslov if pozivamo funkciju getUnreadMessageCount()
-funkciji getUnreadMessageCount() dodajemo metodu then()
-u komponentu MessageCard.jsx importujemo i pozivamo funkciju getUnreadMessageCount()
-vrijednost funkcije useGlobalContext() pohranjujemo u destruktuiranu varijablu const { setUnreadCount }
-u funkciju handleReadClick() pozivamo funkciju setUnreadCount()
-u funkciju handleDeletelick() pozivamo funkciju setUnreadCount()


Section 10: Pagination, Featured, Lightbox & Deploy

73. Pagination Logic
-u komponenti PropertyCard.jsx dodajemo komponentu Image u komponentu Link
-u komponenti app/properties/page.jsx, funkciji PropertiesPage() dodajemo parametar destruktuirani prop searchParams
-kreiramo varijable const skip i const total